/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   validation.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: apyltsov <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2018/07/13 14:52:14 by apyltsov          #+#    #+#             */
/*   Updated: 2018/07/13 14:52:18 by apyltsov         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "lem_in.h"

void	valid_num_ants(char	*str, t_global *lem)
{
	int	i;

	i = 0;
	if (str[i] == '+')
		i++;
	if (str[i] == '0')
	{
		ft_putstr("Error: number of ants invalid");
		exit(1);
	}
	while (str[i] && ft_isdigit(str[i]))
		i++;
	if (i > 0 && i < 11 && (str[i] == '\0'))
		lem->ants = ft_atoi(str);
	else
	{
		ft_putstr("Error: number of ants invalid");
		exit(1);
	}
}

void	parse_command(t_global *lem, char *line)
{
	t_room	*head;

	if (ft_strequ(line, "##start"))
		lem->g_st_end = 1;
	else if (ft_strequ(line, "##end"))
		lem->g_st_end = -1;
	else
	{
		ft_putstr("Error: invalid command");
		exit(1);
	}
	head = lem->rooms;
	while (head)
	{
		if ((lem->g_st_end == 1 && head->st_end == 1) ||
		(lem->g_st_end == -1 && head->st_end == -1))
		{
			ft_freerooms(&(lem->rooms));
			ft_putstr("Error: commands start and end must be only one");
			exit(1);
		}
		head = head->next;
	}
}

void	parse_links_room(t_global *lem, t_room **rooms, char *line)
{
	char	**dst;
	int		x;
	int		y;
	int		i;
	t_room	*head;
	t_room 	*elem;

	i = 0;
	while (line[i])
	{
		while (line[i] && line[i] != ' ')
			i++;
		if (line[i] && !ft_isdigit(line[++i]) && line[i] != '-' &&line[i] != '+')
		{
			ft_putstr("Error: between room name fnd coordinate must be only one spase");
			exit(1);
		}
	}
	if (ft_strchr(line, ' '))
	{
		dst = ft_strsplit(line, ' ');
		if (dst[3] || ft_strchr(dst[0], '-'))
		{
			ft_putstr("Error: invalid input for room");
			exit(1);
		}
		i = 0;
		while (dst[1][++i] || dst[2][i])
		{
			if ((dst[1][i] && !ft_isdigit(dst[1][i])) ||
			(dst[2][i] && !ft_isdigit(dst[2][i])))
			{
				ft_putstr("Error: invalid rooms coordinates");
				exit(1);
			}
		}
	}
	x = ft_atoi(dst[1]);
	y = ft_atoi(dst[2]);
	head = *rooms;
    elem = (t_room *)ft_memalloc(sizeof(t_room));
    elem->x = x;
	elem->y = y;
	elem->next = NULL;
	lem->count_rooms++;
	// printf("%s\n", "ya tyt");
	if (head == NULL)
		*rooms = elem;
	else if (ft_cheak_rn(*rooms, dst[0], x, y))
	{
		while (head->next)
			head = head->next;
		head->next = elem;
	}
	else
	{
		ft_freerooms(rooms);
		ft_putstr("Error: duplicate room names or coordinates");
		exit(1);
	}
	elem->name = ft_strdup(dst[0]);
	elem->st_end = lem->g_st_end;
	lem->g_st_end = 0;
	ft_freedom(dst, 4);
}

int	ft_cheak_rn(t_room *rooms, char *name, int x, int y)
{
	t_room	*head;

	head = rooms;
	while (head)
	{
		if (ft_strequ(head->name, name) ||
		(head->x == x && head->y == y))
		  {
		    printf("|%d|%d||||%d|%d|\n",head->x, x, head->y, y); 
		    return (0);
		  }
		head = head->next;
	}
	return (1);
}

void	ft_freerooms(t_room **rooms)
{
	t_room	*time;

	while (*rooms)
	{
		free((*rooms)->name);
		time = (*rooms)->next;
		free(*rooms);
		*rooms = time;
	}
}

